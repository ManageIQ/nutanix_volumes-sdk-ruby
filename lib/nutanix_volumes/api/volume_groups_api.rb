=begin
#Nutanix Volumes APIs

#Configure volumes.

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module NutanixVolumes
  class VolumeGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Associate category to a Volume Group
    # Associates a category to a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param volumes_v40_config_category_entity_references [VolumesV40ConfigCategoryEntityReferences] The list of categories to be associated/disassociated with the Volume Group. This is a mandatory field.
    # @param [Hash] opts the optional parameters
    # @return [AssociateCategory202Response]
    def associate_category(ext_id, volumes_v40_config_category_entity_references, opts = {})
      data, _status_code, _headers = associate_category_with_http_info(ext_id, volumes_v40_config_category_entity_references, opts)
      data
    end

    # Associate category to a Volume Group
    # Associates a category to a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param volumes_v40_config_category_entity_references [VolumesV40ConfigCategoryEntityReferences] The list of categories to be associated/disassociated with the Volume Group. This is a mandatory field.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssociateCategory202Response, Integer, Hash)>] AssociateCategory202Response data, response status code and response headers
    def associate_category_with_http_info(ext_id, volumes_v40_config_category_entity_references, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.associate_category ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.associate_category"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.associate_category, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'volumes_v40_config_category_entity_references' is set
      if @api_client.config.client_side_validation && volumes_v40_config_category_entity_references.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_category_entity_references' when calling VolumeGroupsApi.associate_category"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}/$actions/associate-category'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_category_entity_references)

      # return_type
      return_type = opts[:debug_return_type] || 'AssociateCategory202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.associate_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#associate_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach an iSCSI client to the given Volume Group
    # Attaches iSCSI initiator to a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_iscsi_client [VolumesV40ConfigIscsiClient] A model that represents an iSCSI client that can be associated with a Volume Group as an external attachment.
    # @param [Hash] opts the optional parameters
    # @return [AttachIscsiClient202Response]
    def attach_iscsi_client(ext_id, ntnx_request_id, volumes_v40_config_iscsi_client, opts = {})
      data, _status_code, _headers = attach_iscsi_client_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_iscsi_client, opts)
      data
    end

    # Attach an iSCSI client to the given Volume Group
    # Attaches iSCSI initiator to a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_iscsi_client [VolumesV40ConfigIscsiClient] A model that represents an iSCSI client that can be associated with a Volume Group as an external attachment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttachIscsiClient202Response, Integer, Hash)>] AttachIscsiClient202Response data, response status code and response headers
    def attach_iscsi_client_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_iscsi_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.attach_iscsi_client ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.attach_iscsi_client"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.attach_iscsi_client, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.attach_iscsi_client"
      end
      # verify the required parameter 'volumes_v40_config_iscsi_client' is set
      if @api_client.config.client_side_validation && volumes_v40_config_iscsi_client.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_iscsi_client' when calling VolumeGroupsApi.attach_iscsi_client"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}/$actions/attach-iscsi-client'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_iscsi_client)

      # return_type
      return_type = opts[:debug_return_type] || 'AttachIscsiClient202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.attach_iscsi_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#attach_iscsi_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach an AHV VM to the given Volume Group
    # Attaches VM to a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_vm_attachment [VolumesV40ConfigVmAttachment] A model that represents a VM reference that can be associated with a Volume Group as an AHV hypervisor attachment.
    # @param [Hash] opts the optional parameters
    # @return [AttachVm202Response]
    def attach_vm(ext_id, ntnx_request_id, volumes_v40_config_vm_attachment, opts = {})
      data, _status_code, _headers = attach_vm_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_vm_attachment, opts)
      data
    end

    # Attach an AHV VM to the given Volume Group
    # Attaches VM to a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_vm_attachment [VolumesV40ConfigVmAttachment] A model that represents a VM reference that can be associated with a Volume Group as an AHV hypervisor attachment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttachVm202Response, Integer, Hash)>] AttachVm202Response data, response status code and response headers
    def attach_vm_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_vm_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.attach_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.attach_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.attach_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.attach_vm"
      end
      # verify the required parameter 'volumes_v40_config_vm_attachment' is set
      if @api_client.config.client_side_validation && volumes_v40_config_vm_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_vm_attachment' when calling VolumeGroupsApi.attach_vm"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}/$actions/attach-vm'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_vm_attachment)

      # return_type
      return_type = opts[:debug_return_type] || 'AttachVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.attach_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#attach_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new Volume Disk
    # Creates a new Volume Disk.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_disk [VolumesV40ConfigVolumeDisk] A model that represents a Volume Disk associated with a Volume Group, supported by a backing file on DSF.
    # @param [Hash] opts the optional parameters
    # @return [CreateVolumeDisk202Response]
    def create_volume_disk(volume_group_ext_id, ntnx_request_id, volumes_v40_config_volume_disk, opts = {})
      data, _status_code, _headers = create_volume_disk_with_http_info(volume_group_ext_id, ntnx_request_id, volumes_v40_config_volume_disk, opts)
      data
    end

    # Creates a new Volume Disk
    # Creates a new Volume Disk.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_disk [VolumesV40ConfigVolumeDisk] A model that represents a Volume Disk associated with a Volume Group, supported by a backing file on DSF.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateVolumeDisk202Response, Integer, Hash)>] CreateVolumeDisk202Response data, response status code and response headers
    def create_volume_disk_with_http_info(volume_group_ext_id, ntnx_request_id, volumes_v40_config_volume_disk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.create_volume_disk ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.create_volume_disk"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.create_volume_disk, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.create_volume_disk"
      end
      # verify the required parameter 'volumes_v40_config_volume_disk' is set
      if @api_client.config.client_side_validation && volumes_v40_config_volume_disk.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_volume_disk' when calling VolumeGroupsApi.create_volume_disk"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/disks'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_volume_disk)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateVolumeDisk202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.create_volume_disk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#create_volume_disk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new Volume Group
    # Creates a new Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_group [VolumesV40ConfigVolumeGroup] A model that represents a Volume Group resource.
    # @param [Hash] opts the optional parameters
    # @return [CreateVolumeGroup202Response]
    def create_volume_group(ntnx_request_id, volumes_v40_config_volume_group, opts = {})
      data, _status_code, _headers = create_volume_group_with_http_info(ntnx_request_id, volumes_v40_config_volume_group, opts)
      data
    end

    # Creates a new Volume Group
    # Creates a new Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_group [VolumesV40ConfigVolumeGroup] A model that represents a Volume Group resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateVolumeGroup202Response, Integer, Hash)>] CreateVolumeGroup202Response data, response status code and response headers
    def create_volume_group_with_http_info(ntnx_request_id, volumes_v40_config_volume_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.create_volume_group ...'
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.create_volume_group"
      end
      # verify the required parameter 'volumes_v40_config_volume_group' is set
      if @api_client.config.client_side_validation && volumes_v40_config_volume_group.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_volume_group' when calling VolumeGroupsApi.create_volume_group"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_volume_group)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateVolumeGroup202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.create_volume_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#create_volume_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Volume Disk
    # Deletes a Volume Disk identified by {extId} in the Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteVolumeDiskById202Response]
    def delete_volume_disk_by_id(volume_group_ext_id, ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_volume_disk_by_id_with_http_info(volume_group_ext_id, ext_id, ntnx_request_id, opts)
      data
    end

    # Delete a Volume Disk
    # Deletes a Volume Disk identified by {extId} in the Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteVolumeDiskById202Response, Integer, Hash)>] DeleteVolumeDiskById202Response data, response status code and response headers
    def delete_volume_disk_by_id_with_http_info(volume_group_ext_id, ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.delete_volume_disk_by_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.delete_volume_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.delete_volume_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.delete_volume_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.delete_volume_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.delete_volume_disk_by_id"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/disks/{extId}'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteVolumeDiskById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.delete_volume_disk_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#delete_volume_disk_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the Volume Group
    # Delete the Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteVolumeGroupById202Response]
    def delete_volume_group_by_id(ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_volume_group_by_id_with_http_info(ext_id, ntnx_request_id, opts)
      data
    end

    # Delete the Volume Group
    # Delete the Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteVolumeGroupById202Response, Integer, Hash)>] DeleteVolumeGroupById202Response data, response status code and response headers
    def delete_volume_group_by_id_with_http_info(ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.delete_volume_group_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.delete_volume_group_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.delete_volume_group_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.delete_volume_group_by_id"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteVolumeGroupById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.delete_volume_group_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#delete_volume_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach an iSCSi client from the given Volume Group
    # Detaches iSCSI initiator identified by {extId} from a Volume Group identified by {volumeGroupExtId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_iscsi_client_attachment [VolumesV40ConfigIscsiClientAttachment] A model that represents an iSCSI client that can be associated with a Volume Group as an external attachment. It contains the minimal properties required for the attachment.
    # @param [Hash] opts the optional parameters
    # @return [DetachIscsiClient202Response]
    def detach_iscsi_client(ext_id, ntnx_request_id, volumes_v40_config_iscsi_client_attachment, opts = {})
      data, _status_code, _headers = detach_iscsi_client_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_iscsi_client_attachment, opts)
      data
    end

    # Detach an iSCSi client from the given Volume Group
    # Detaches iSCSI initiator identified by {extId} from a Volume Group identified by {volumeGroupExtId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_iscsi_client_attachment [VolumesV40ConfigIscsiClientAttachment] A model that represents an iSCSI client that can be associated with a Volume Group as an external attachment. It contains the minimal properties required for the attachment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetachIscsiClient202Response, Integer, Hash)>] DetachIscsiClient202Response data, response status code and response headers
    def detach_iscsi_client_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_iscsi_client_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.detach_iscsi_client ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.detach_iscsi_client"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.detach_iscsi_client, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.detach_iscsi_client"
      end
      # verify the required parameter 'volumes_v40_config_iscsi_client_attachment' is set
      if @api_client.config.client_side_validation && volumes_v40_config_iscsi_client_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_iscsi_client_attachment' when calling VolumeGroupsApi.detach_iscsi_client"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}/$actions/detach-iscsi-client'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_iscsi_client_attachment)

      # return_type
      return_type = opts[:debug_return_type] || 'DetachIscsiClient202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.detach_iscsi_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#detach_iscsi_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach an AHV VM from the given Volume Group
    # Detaches VM identified by {extId} from a Volume Group identified by {volumeGroupExtId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_vm_attachment [VolumesV40ConfigVmAttachment] A model that represents a VM reference that can be associated with a Volume Group as an AHV hypervisor attachment.
    # @param [Hash] opts the optional parameters
    # @return [DetachVm202Response]
    def detach_vm(ext_id, ntnx_request_id, volumes_v40_config_vm_attachment, opts = {})
      data, _status_code, _headers = detach_vm_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_vm_attachment, opts)
      data
    end

    # Detach an AHV VM from the given Volume Group
    # Detaches VM identified by {extId} from a Volume Group identified by {volumeGroupExtId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_vm_attachment [VolumesV40ConfigVmAttachment] A model that represents a VM reference that can be associated with a Volume Group as an AHV hypervisor attachment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetachVm202Response, Integer, Hash)>] DetachVm202Response data, response status code and response headers
    def detach_vm_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_vm_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.detach_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.detach_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.detach_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.detach_vm"
      end
      # verify the required parameter 'volumes_v40_config_vm_attachment' is set
      if @api_client.config.client_side_validation && volumes_v40_config_vm_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_vm_attachment' when calling VolumeGroupsApi.detach_vm"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}/$actions/detach-vm'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_vm_attachment)

      # return_type
      return_type = opts[:debug_return_type] || 'DetachVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.detach_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#detach_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate category from a Volume Group
    # Disassociates a category from a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param volumes_v40_config_category_entity_references [VolumesV40ConfigCategoryEntityReferences] The list of categories to be associated/disassociated with the Volume Group. This is a mandatory field.
    # @param [Hash] opts the optional parameters
    # @return [DisassociateCategory202Response]
    def disassociate_category(ext_id, volumes_v40_config_category_entity_references, opts = {})
      data, _status_code, _headers = disassociate_category_with_http_info(ext_id, volumes_v40_config_category_entity_references, opts)
      data
    end

    # Disassociate category from a Volume Group
    # Disassociates a category from a Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param volumes_v40_config_category_entity_references [VolumesV40ConfigCategoryEntityReferences] The list of categories to be associated/disassociated with the Volume Group. This is a mandatory field.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisassociateCategory202Response, Integer, Hash)>] DisassociateCategory202Response data, response status code and response headers
    def disassociate_category_with_http_info(ext_id, volumes_v40_config_category_entity_references, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.disassociate_category ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.disassociate_category"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.disassociate_category, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'volumes_v40_config_category_entity_references' is set
      if @api_client.config.client_side_validation && volumes_v40_config_category_entity_references.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_category_entity_references' when calling VolumeGroupsApi.disassociate_category"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}/$actions/disassociate-category'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_category_entity_references)

      # return_type
      return_type = opts[:debug_return_type] || 'DisassociateCategory202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.disassociate_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#disassociate_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of a Volume Disk
    # Query the Volume Disk identified by {extId} in the Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param [Hash] opts the optional parameters
    # @return [GetVolumeDiskById200Response]
    def get_volume_disk_by_id(volume_group_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_volume_disk_by_id_with_http_info(volume_group_ext_id, ext_id, opts)
      data
    end

    # Get the details of a Volume Disk
    # Query the Volume Disk identified by {extId} in the Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVolumeDiskById200Response, Integer, Hash)>] GetVolumeDiskById200Response data, response status code and response headers
    def get_volume_disk_by_id_with_http_info(volume_group_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.get_volume_disk_by_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.get_volume_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.get_volume_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.get_volume_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.get_volume_disk_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/disks/{extId}'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVolumeDiskById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.get_volume_disk_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#get_volume_disk_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get statistics for a Volume Disk
    # Query the Volume Disk stats identified by {diskExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - controllerAvgIOLatencyUsecs - controllerAvgReadIOLatencyUsecs - controllerAvgWriteIOLatencyUsecs - controllerIOBandwidthKBps - controllerNumIOPS - controllerNumReadIOPS - controllerNumWriteIOPS - controllerReadIOBandwidthKBps - controllerUserBytes - controllerWriteIOBandwidthKBps 
    # @return [GetVolumeDiskStats200Response]
    def get_volume_disk_stats(volume_group_ext_id, ext_id, start_time, end_time, opts = {})
      data, _status_code, _headers = get_volume_disk_stats_with_http_info(volume_group_ext_id, ext_id, start_time, end_time, opts)
      data
    end

    # Get statistics for a Volume Disk
    # Query the Volume Disk stats identified by {diskExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - controllerAvgIOLatencyUsecs - controllerAvgReadIOLatencyUsecs - controllerAvgWriteIOLatencyUsecs - controllerIOBandwidthKBps - controllerNumIOPS - controllerNumReadIOPS - controllerNumWriteIOPS - controllerReadIOBandwidthKBps - controllerUserBytes - controllerWriteIOBandwidthKBps 
    # @return [Array<(GetVolumeDiskStats200Response, Integer, Hash)>] GetVolumeDiskStats200Response data, response status code and response headers
    def get_volume_disk_stats_with_http_info(volume_group_ext_id, ext_id, start_time, end_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.get_volume_disk_stats ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.get_volume_disk_stats"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.get_volume_disk_stats, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.get_volume_disk_stats"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.get_volume_disk_stats, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling VolumeGroupsApi.get_volume_disk_stats"
      end
      # verify the required parameter 'end_time' is set
      if @api_client.config.client_side_validation && end_time.nil?
        fail ArgumentError, "Missing the required parameter 'end_time' when calling VolumeGroupsApi.get_volume_disk_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'sampling_interval'].nil? && opts[:'sampling_interval'] < 1
        fail ArgumentError, 'invalid value for "opts[:"sampling_interval"]" when calling VolumeGroupsApi.get_volume_disk_stats, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/volumes/v4.0/stats/volume-groups/{volumeGroupExtId}/disks/{extId}'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$startTime'] = start_time
      query_params[:'$endTime'] = end_time
      query_params[:'$samplingInterval'] = opts[:'sampling_interval'] if !opts[:'sampling_interval'].nil?
      query_params[:'$statType'] = opts[:'stat_type'] if !opts[:'stat_type'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVolumeDiskStats200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.get_volume_disk_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#get_volume_disk_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Volume Group
    # Query the Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @return [GetVolumeGroupById200Response]
    def get_volume_group_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_volume_group_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get a Volume Group
    # Query the Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVolumeGroupById200Response, Integer, Hash)>] GetVolumeGroupById200Response data, response status code and response headers
    def get_volume_group_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.get_volume_group_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.get_volume_group_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.get_volume_group_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVolumeGroupById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.get_volume_group_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#get_volume_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch metadata information associated with a Volume Group.
    # Query for metadata information which is associated with the Volume Group identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @return [GetVolumeGroupMetadataById200Response]
    def get_volume_group_metadata_by_id(volume_group_ext_id, opts = {})
      data, _status_code, _headers = get_volume_group_metadata_by_id_with_http_info(volume_group_ext_id, opts)
      data
    end

    # Fetch metadata information associated with a Volume Group.
    # Query for metadata information which is associated with the Volume Group identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVolumeGroupMetadataById200Response, Integer, Hash)>] GetVolumeGroupMetadataById200Response data, response status code and response headers
    def get_volume_group_metadata_by_id_with_http_info(volume_group_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.get_volume_group_metadata_by_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.get_volume_group_metadata_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.get_volume_group_metadata_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/metadata'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVolumeGroupMetadataById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.get_volume_group_metadata_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#get_volume_group_metadata_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get statistics for a Volume Group
    # Query the Volume Group stats identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - controllerAvgIOLatencyUsecs - controllerAvgReadIOLatencyUsecs - controllerAvgWriteIOLatencyUsecs - controllerIOBandwidthKBps - controllerNumIOPS - controllerNumReadIOPS - controllerNumWriteIOPS - controllerReadIOBandwidthKBps - controllerUserBytes - controllerWriteIOBandwidthKBps 
    # @return [GetVolumeGroupStats200Response]
    def get_volume_group_stats(ext_id, start_time, end_time, opts = {})
      data, _status_code, _headers = get_volume_group_stats_with_http_info(ext_id, start_time, end_time, opts)
      data
    end

    # Get statistics for a Volume Group
    # Query the Volume Group stats identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - controllerAvgIOLatencyUsecs - controllerAvgReadIOLatencyUsecs - controllerAvgWriteIOLatencyUsecs - controllerIOBandwidthKBps - controllerNumIOPS - controllerNumReadIOPS - controllerNumWriteIOPS - controllerReadIOBandwidthKBps - controllerUserBytes - controllerWriteIOBandwidthKBps 
    # @return [Array<(GetVolumeGroupStats200Response, Integer, Hash)>] GetVolumeGroupStats200Response data, response status code and response headers
    def get_volume_group_stats_with_http_info(ext_id, start_time, end_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.get_volume_group_stats ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.get_volume_group_stats"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.get_volume_group_stats, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling VolumeGroupsApi.get_volume_group_stats"
      end
      # verify the required parameter 'end_time' is set
      if @api_client.config.client_side_validation && end_time.nil?
        fail ArgumentError, "Missing the required parameter 'end_time' when calling VolumeGroupsApi.get_volume_group_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'sampling_interval'].nil? && opts[:'sampling_interval'] < 1
        fail ArgumentError, 'invalid value for "opts[:"sampling_interval"]" when calling VolumeGroupsApi.get_volume_group_stats, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/volumes/v4.0/stats/volume-groups/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$startTime'] = start_time
      query_params[:'$endTime'] = end_time
      query_params[:'$samplingInterval'] = opts[:'sampling_interval'] if !opts[:'sampling_interval'].nil?
      query_params[:'$statType'] = opts[:'stat_type'] if !opts[:'stat_type'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVolumeGroupStats200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.get_volume_group_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#get_volume_group_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the category details that are associated with the Volume Group
    # Query the category details that are associated with the Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [ListCategoryAssociationsByVolumeGroupId200Response]
    def list_category_associations_by_volume_group_id(volume_group_ext_id, opts = {})
      data, _status_code, _headers = list_category_associations_by_volume_group_id_with_http_info(volume_group_ext_id, opts)
      data
    end

    # List all the category details that are associated with the Volume Group
    # Query the category details that are associated with the Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [Array<(ListCategoryAssociationsByVolumeGroupId200Response, Integer, Hash)>] ListCategoryAssociationsByVolumeGroupId200Response data, response status code and response headers
    def list_category_associations_by_volume_group_id_with_http_info(volume_group_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.list_category_associations_by_volume_group_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.list_category_associations_by_volume_group_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.list_category_associations_by_volume_group_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VolumeGroupsApi.list_category_associations_by_volume_group_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_category_associations_by_volume_group_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_category_associations_by_volume_group_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/category-associations'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCategoryAssociationsByVolumeGroupId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.list_category_associations_by_volume_group_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#list_category_associations_by_volume_group_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the iSCSI attachments associated with the given Volume Group
    # Query the list of external iSCSI attachments for a Volume Group identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterReference - extId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - clusterReference - extId 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - iscsiClient 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - clusterReference - extId 
    # @return [ListExternalIscsiAttachmentsByVolumeGroupId200Response]
    def list_external_iscsi_attachments_by_volume_group_id(volume_group_ext_id, opts = {})
      data, _status_code, _headers = list_external_iscsi_attachments_by_volume_group_id_with_http_info(volume_group_ext_id, opts)
      data
    end

    # List all the iSCSI attachments associated with the given Volume Group
    # Query the list of external iSCSI attachments for a Volume Group identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterReference - extId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - clusterReference - extId 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - iscsiClient 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - clusterReference - extId 
    # @return [Array<(ListExternalIscsiAttachmentsByVolumeGroupId200Response, Integer, Hash)>] ListExternalIscsiAttachmentsByVolumeGroupId200Response data, response status code and response headers
    def list_external_iscsi_attachments_by_volume_group_id_with_http_info(volume_group_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.list_external_iscsi_attachments_by_volume_group_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.list_external_iscsi_attachments_by_volume_group_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.list_external_iscsi_attachments_by_volume_group_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VolumeGroupsApi.list_external_iscsi_attachments_by_volume_group_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_external_iscsi_attachments_by_volume_group_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_external_iscsi_attachments_by_volume_group_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/external-iscsi-attachments'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListExternalIscsiAttachmentsByVolumeGroupId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.list_external_iscsi_attachments_by_volume_group_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#list_external_iscsi_attachments_by_volume_group_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the VM attachments for a Volume Group
    # Query the list of VM attachments for a Volume Group identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - extId 
    # @return [ListVmAttachmentsByVolumeGroupId200Response]
    def list_vm_attachments_by_volume_group_id(volume_group_ext_id, opts = {})
      data, _status_code, _headers = list_vm_attachments_by_volume_group_id_with_http_info(volume_group_ext_id, opts)
      data
    end

    # List all the VM attachments for a Volume Group
    # Query the list of VM attachments for a Volume Group identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - extId 
    # @return [Array<(ListVmAttachmentsByVolumeGroupId200Response, Integer, Hash)>] ListVmAttachmentsByVolumeGroupId200Response data, response status code and response headers
    def list_vm_attachments_by_volume_group_id_with_http_info(volume_group_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.list_vm_attachments_by_volume_group_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.list_vm_attachments_by_volume_group_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.list_vm_attachments_by_volume_group_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VolumeGroupsApi.list_vm_attachments_by_volume_group_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_vm_attachments_by_volume_group_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_vm_attachments_by_volume_group_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/vm-attachments'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVmAttachmentsByVolumeGroupId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.list_vm_attachments_by_volume_group_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#list_vm_attachments_by_volume_group_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the Volume Disks attached to the Volume Group
    # Query the list of disks corresponding to a Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - storageContainerId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - diskSizeBytes 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - extId - storageContainerId 
    # @return [ListVolumeDisksByVolumeGroupId200Response]
    def list_volume_disks_by_volume_group_id(volume_group_ext_id, opts = {})
      data, _status_code, _headers = list_volume_disks_by_volume_group_id_with_http_info(volume_group_ext_id, opts)
      data
    end

    # List all the Volume Disks attached to the Volume Group
    # Query the list of disks corresponding to a Volume Group identified by {volumeGroupExtId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - storageContainerId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - diskSizeBytes 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - extId - storageContainerId 
    # @return [Array<(ListVolumeDisksByVolumeGroupId200Response, Integer, Hash)>] ListVolumeDisksByVolumeGroupId200Response data, response status code and response headers
    def list_volume_disks_by_volume_group_id_with_http_info(volume_group_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.list_volume_disks_by_volume_group_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.list_volume_disks_by_volume_group_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.list_volume_disks_by_volume_group_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VolumeGroupsApi.list_volume_disks_by_volume_group_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_volume_disks_by_volume_group_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_volume_disks_by_volume_group_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/disks'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVolumeDisksByVolumeGroupId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.list_volume_disks_by_volume_group_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#list_volume_disks_by_volume_group_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the Volume Groups
    # Query the list of Volume Groups.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterReference - extId - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - clusterReference - extId - name 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - cluster - metadata 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - clusterReference - extId - name 
    # @return [ListVolumeGroups200Response]
    def list_volume_groups(opts = {})
      data, _status_code, _headers = list_volume_groups_with_http_info(opts)
      data
    end

    # List all the Volume Groups
    # Query the list of Volume Groups.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterReference - extId - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - clusterReference - extId - name 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - cluster - metadata 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - clusterReference - extId - name 
    # @return [Array<(ListVolumeGroups200Response, Integer, Hash)>] ListVolumeGroups200Response data, response status code and response headers
    def list_volume_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.list_volume_groups ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VolumeGroupsApi.list_volume_groups, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_volume_groups, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VolumeGroupsApi.list_volume_groups, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVolumeGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.list_volume_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#list_volume_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revert a Volume Group
    # Reverts a Volume Group identified by Volume Group external identifier. This API performs an in-place restore from a specified Volume Group recovery point.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_revert_spec [VolumesV40ConfigRevertSpec] Specify the Volume Group recovery point ID to which the Volume Group would be reverted.
    # @param [Hash] opts the optional parameters
    # @return [RevertVolumeGroup202Response]
    def revert_volume_group(ext_id, ntnx_request_id, volumes_v40_config_revert_spec, opts = {})
      data, _status_code, _headers = revert_volume_group_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_revert_spec, opts)
      data
    end

    # Revert a Volume Group
    # Reverts a Volume Group identified by Volume Group external identifier. This API performs an in-place restore from a specified Volume Group recovery point.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_revert_spec [VolumesV40ConfigRevertSpec] Specify the Volume Group recovery point ID to which the Volume Group would be reverted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RevertVolumeGroup202Response, Integer, Hash)>] RevertVolumeGroup202Response data, response status code and response headers
    def revert_volume_group_with_http_info(ext_id, ntnx_request_id, volumes_v40_config_revert_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.revert_volume_group ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.revert_volume_group"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.revert_volume_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.revert_volume_group"
      end
      # verify the required parameter 'volumes_v40_config_revert_spec' is set
      if @api_client.config.client_side_validation && volumes_v40_config_revert_spec.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_revert_spec' when calling VolumeGroupsApi.revert_volume_group"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}/$actions/revert'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_revert_spec)

      # return_type
      return_type = opts[:debug_return_type] || 'RevertVolumeGroup202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.revert_volume_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#revert_volume_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specified Volume Disk
    # Updates a specific Volume Disk identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_disk [VolumesV40ConfigVolumeDisk] A model that represents a Volume Disk associated with a Volume Group, supported by a backing file on DSF.
    # @param [Hash] opts the optional parameters
    # @return [UpdateVolumeDiskById202Response]
    def update_volume_disk_by_id(volume_group_ext_id, ext_id, if_match, ntnx_request_id, volumes_v40_config_volume_disk, opts = {})
      data, _status_code, _headers = update_volume_disk_by_id_with_http_info(volume_group_ext_id, ext_id, if_match, ntnx_request_id, volumes_v40_config_volume_disk, opts)
      data
    end

    # Update a specified Volume Disk
    # Updates a specific Volume Disk identified by {extId}.
    # @param volume_group_ext_id [String] The external identifier of a Volume Group.
    # @param ext_id [String] The external identifier of a Volume Disk.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_disk [VolumesV40ConfigVolumeDisk] A model that represents a Volume Disk associated with a Volume Group, supported by a backing file on DSF.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateVolumeDiskById202Response, Integer, Hash)>] UpdateVolumeDiskById202Response data, response status code and response headers
    def update_volume_disk_by_id_with_http_info(volume_group_ext_id, ext_id, if_match, ntnx_request_id, volumes_v40_config_volume_disk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.update_volume_disk_by_id ...'
      end
      # verify the required parameter 'volume_group_ext_id' is set
      if @api_client.config.client_side_validation && volume_group_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_group_ext_id' when calling VolumeGroupsApi.update_volume_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && volume_group_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'volume_group_ext_id' when calling VolumeGroupsApi.update_volume_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.update_volume_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.update_volume_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VolumeGroupsApi.update_volume_disk_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.update_volume_disk_by_id"
      end
      # verify the required parameter 'volumes_v40_config_volume_disk' is set
      if @api_client.config.client_side_validation && volumes_v40_config_volume_disk.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_volume_disk' when calling VolumeGroupsApi.update_volume_disk_by_id"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{volumeGroupExtId}/disks/{extId}'.sub('{' + 'volumeGroupExtId' + '}', CGI.escape(volume_group_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_volume_disk)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateVolumeDiskById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.update_volume_disk_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#update_volume_disk_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update details of a specified Volume Group
    # Updates details of a specific Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_group [VolumesV40ConfigVolumeGroup] A model that represents a Volume Group resource.
    # @param [Hash] opts the optional parameters
    # @return [UpdateVolumeGroupById202Response]
    def update_volume_group_by_id(ext_id, if_match, ntnx_request_id, volumes_v40_config_volume_group, opts = {})
      data, _status_code, _headers = update_volume_group_by_id_with_http_info(ext_id, if_match, ntnx_request_id, volumes_v40_config_volume_group, opts)
      data
    end

    # Update details of a specified Volume Group
    # Updates details of a specific Volume Group identified by {extId}.
    # @param ext_id [String] The external identifier of a Volume Group.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param volumes_v40_config_volume_group [VolumesV40ConfigVolumeGroup] A model that represents a Volume Group resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateVolumeGroupById202Response, Integer, Hash)>] UpdateVolumeGroupById202Response data, response status code and response headers
    def update_volume_group_by_id_with_http_info(ext_id, if_match, ntnx_request_id, volumes_v40_config_volume_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumeGroupsApi.update_volume_group_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VolumeGroupsApi.update_volume_group_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VolumeGroupsApi.update_volume_group_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VolumeGroupsApi.update_volume_group_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VolumeGroupsApi.update_volume_group_by_id"
      end
      # verify the required parameter 'volumes_v40_config_volume_group' is set
      if @api_client.config.client_side_validation && volumes_v40_config_volume_group.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_v40_config_volume_group' when calling VolumeGroupsApi.update_volume_group_by_id"
      end
      # resource path
      local_var_path = '/volumes/v4.0/config/volume-groups/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volumes_v40_config_volume_group)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateVolumeGroupById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VolumeGroupsApi.update_volume_group_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumeGroupsApi#update_volume_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
